#############################################################
######################### Functions #########################
#############################################################

load-syntax-highlighting() {
	local plugins=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins
	local syntax_highlighting=${ANTIGEN_BUNDLES:-~/.antigen/bundles}/zsh-users/zsh-syntax-highlighting
	local highlighter_repo=git@github.com:zsh-users/zsh-syntax-highlighting.git

	if [ ! -d $plugins/zsh-syntax-highlighting ]; then
		jb-zsh-debug "[LOAD SYNTAX HIGHLIGHTING DEBUG]: 	creating $plugins/zsh-syntax-highlighting"
		mkdir -p $plugins/zsh-syntax-highlighting
		jb-zsh-debug "[LOAD SYNTAX HIGHLIGHTING DEBUG]: 	$plugins/zsh-syntax-highlighting created."

		jb-zsh-debug "[LOAD SYNTAX HIGHLIGHTING DEBUG]: 	cloning $highlighter_repo into $plugins/zsh-syntax-highlighting" 2
		git clone $highlighter_repo $plugins/zsh-syntax-highlighting
		jb-zsh-debug "[LOAD SYNTAX HIGHLIGHTING DEBUG]: 	$highlighter_repo was cloned successfully" 2
	fi
}
load-url-highlighter() {
	local plugins=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins
	local syntax_highlighting=${ANTIGEN_BUNDLES:-~/.antigen/bundles}/zsh-users/zsh-syntax-highlighting
	local highlighter_repo=git@github.com:ascii-soup/zsh-url-highlighter.git

	if [ ! -d $plugins/zsh-url-highlighter ]; then
		jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	creating $plugins/zsh-url-highlighter"
		mkdir -p $plugins/zsh-url-highlighter
		jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	$plugins/zsh-url-highlighter created."

		jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	cloning $highlighter_repo into $plugins/zsh-url-highlighter" 2
		git clone $highlighter_repo $plugins/zsh-url-highlighter
		jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	$highlighter_repo was cloned successfully" 2
	fi

  if [ ! -L $syntax_highlighting/highlighters/url ]; then
	  jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	linking $plugins/zsh-url-highlighter/url to $syntax_highlighting/highlighters/url" 2
	  ln -s $plugins/zsh-url-highlighter/url $syntax_highlighting/highlighters
	  jb-zsh-debug "[LOAD URL HIGHLIGHTER DEBUG]: 	$plugins/zsh-url-highlighter/url to $syntax_highlighting/highlighters/url linked successfully" 2
  fi
}

zshrc() {
  local editor=${EDITOR:-code}

  if [ -f "$JB_ZSH_BASE/zsh/base" ]; then
    $editor $JB_ZSH_BASE/zsh/base
  elif [ -f "$HOME/.zshrc" ]; then
    $editor $HOME/.zshrc
  else
    echo "\n\tCant find an zshrc file!"
  fi
}


#   ---------------------------
#   6. SEARCHING
#   ---------------------------

ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string
# ch - browse chrome history
chrome-hist() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'
​
  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h
​
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


#   ---------------------------
#   7. PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
findPid () { lsof -t -c "$@" ; }
myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}
#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
my-ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
hist() { history | grep "$@" ; }
#   extract:  Extract most known archives with one command
#   ---------------------------------------------------------
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}
#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
ii () {
  echo -e "\nYou are logged on ${RED}$HOST"
  echo -e "\nAdditionnal information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Current network location :$NC " ; scselect
  echo -e "\n${RED}Public facing IP Address :$NC " ; myip
}
reload () { exec $SHELL -l ; }
#   nyg: shortcut to globally install pkgs with npm AND yarn
#   ------------------------------------------------------------
nyg () { npm install --global "$1" && yarn global add "$1" ; }
nygAll () {
  while IFS='' read -r line || [[ -n "$line" ]]; do
      echo "\tInstalling Globally:\t$line"
      nyg $line
  done < ~/.nvm/default-packages
}
upgradejb-zsh() {
  emulate -L zsh
  upgrade_oh_my_zsh
  eval antigen selfupdate && eval antigen update
}
#   showa: to remind yourself of an alias (given some part of it)
#   ------------------------------------------------------------
showa () { /usr/bin/grep --color=always -i -a1 "$@" $JB_ZSH_BASE/zsh/alias/*.zsh | grep -v '^\s*$' | less -FSRXc ; }
check-web-connectivity() {
  case "$(curl -s --max-time 2 -I http://google.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
    [23]) echo "HTTP connectivity is up";;
    5) echo "The web proxy won't let us through";;
    *) echo "The network is down or very slow";;
  esac
}

upgradejb-zsh-reload () { upgradejb-zsh && reload; }

# Create a folder and move into it in one command
mkcd() { mkdir -p "$@" && cd "$@"; }

# https://stackoverflow.com/questions/18936337/makefile1-missing-separator-stop/18936393
fix_space_tabs () { perl -pi -e 's/^  */\t/' "$1"; }


#   ---------------------------------------
#   8. PERMISSIONS
#   ---------------------------------------
show_all_users() { cut -d ":" -f 1 /etc/passwd ; }
permitme() { pkexec chown $USER:adm $PWD -hR ; }
users_by_group() { getent group "$1" | awk -F: '{print $4}' ; }

ghget () {
    USER=$(echo $@ | tr "/" " " | awk '{print $1}')
    REPO=$(echo $@ | tr "/" " " | awk '{print $2}')

    mkdir -p $HOME/projects/github.com/$USER && cd $HOME/projects/github.com/$USER
    hub clone $@ && cd $REPO
}
bbget () {
    USER=$(echo $@ | tr "/" " " | awk '{print $1}')
    REPO=$(echo $@ | tr "/" " " | awk '{print $2}')

    mkdir -p ~/projects/bitbucket.org/$USER && cd ~/projects/bitbucket.org/$USER
    git clone https://bitbucket.org/$USER/$REPO.git && cd $REPO
}

git-submodule-rm-clean () {
  git submodule deinit $1 & wait
  git rm $1 & wait
  git commit -m "Removed submodule" && rm -rf .git/modules/$1
}

confirm_existence()
{
    if [[ -d $1 ]] && [[ -n $1 ]] ; then
        echo "\t\tDeleting Directory $1"
        return 0
    fi

    if [[ -f $1 ]] && [[ -n $1 ]] ; then
        echo "\t\tDeleting File $1"
        return 0
    fi

    return 1
}

trash()
{
    if confirm_existence $1; then
        if which rimraf &> /dev/null; then
            rimraf $1 -s
        else
            rm -rf $1
        fi
        echo "\n\t\tSuccessfully Trashed $1"
    fi
    echo
}
