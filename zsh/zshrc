#	-------------------------------
#	JB ZSH DOCUMENTATION
#	-------------------------------

#		autoload
#			The `autoload` feature is not available in bash, but it is in `ksh` (korn shell) and `zsh`.
#			On `zsh` see `man zshbuiltins`.
#
#			Functions are called in the same way as any other command.
#			There can be a name conflict between a program and a function.
#			What autoload does is to mark that name as being a function rather than an external program.
#			The function has to be in a file on its own, with the filename the same as the function name.
#
#			For Example: `autoload -Uz vcs_info`
#
#			The `-U` means mark the function `vcs_info` for autoloading and suppress alias expansion.
#			The `-z` means use `zsh` (rather than `ksh`) style. See also the `functions` command.
#
#			References
#				http://zsh.sourceforge.net/Doc/Release/Files.html
#				http://linux.die.net/man/1/zshbuiltins
#				http://zsh.sourceforge.net/Doc/Release/Functions.html
#				https://stackoverflow.com/questions/12570749/zsh-completion-difference
#				http://bewatermyfriend.org/p/2012/003/
#				https://unix.stackexchange.com/questions/121802/zsh-how-to-check-if-an-option-is-enabled
#				https://www-s.acm.illinois.edu/workshops/zsh/parameters/expansion.html


#	-------------------------------
# CONFIGURATION VARIABLES
# -------------------------------

SYS_LIB_PATH=/System/Library
SYS_FRWKS_PATH=$SYS_LIB_PATH/Frameworks
USER_BIN=/usr/bin
USER_LOCAL=/usr/local
USER_LOCAL_GO=$USER_LOCAL/go
USER_LOCAL_BIN=$USER_LOCAL/bin
USER_LOCAL_LIB=$USER_LOCAL/lib
USER_LOCAL_OPT=$USER_LOCAL/opt
USER_LOCAL_MAN=$USER_LOCAL/man
USER_LOCAL_SHARE=$USER_LOCAL/share
USER_LOCAL_FRWKS=$USER_LOCAL/Frameworks
USER_BIN_PATH=/bin:/sbin:/usr/sbin:$USER_BIN:$USER_LOCAL_BIN
XDG_CONFIG_HOME=$HOME/.config
# XDG_CONFIG_HOME=$HOME/.config/fontconfig/fonts.conf

export PYTHON_VERSION="2.7"
export RUBY_VERSION="2.5.1"
export RBENV_VERSION="1.1.1"

export PAGER='less'
export EDITOR='code'
export VISUAL='nano'

export LANG='en_US.UTF-8'
export GROOVY_HOME=$USER_LOCAL_OPT/groovy/libexec
export NPM_TOKEN="QPASt_5h44AzSHrg4gNv"
export JB_ZSH_BASE=$HOME/.jbconfig
export ZSHA_BASE=$HOME/.antigen
export ZSH_PLUGINS_ALIAS_TIPS_TEXT="Alias tip: "
export WORKON_HOME=$HOME/.virtualenvs
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"
export ADOTDIR=$ZSHA_BASE
export XDG_DATA_DIRS=$USER_LOCAL_SHARE
export PERL_LOCAL_LIB_ROOT=$HOME/perl5
export PERL5LIB=$PERL_LOCAL_LIB_ROOT/lib/perl5
export LDFLAGS=(-L$USER_LOCAL_OPT/{gettext,icu4c,libarchive,openssl,readline}/lib)
export CPPFLAGS=(-I$USER_LOCAL_OPT/{gettext,icu4c,libarchive,openssl,readline}/include)

export BROWSER=open
export SSH_PATH=$HOME/.ssh
export SSH_ENV=$SSH_PATH/environment
export SSH_PRIVATE_KEY=$SSH_PATH/id_rsa
export SSH_KEY_PATH=$SSH_PRIVATE_KEY
export SSH_KNOWN_HOSTS=$SSH_PATH/known_hosts

export KRAKEN_REMOTE_DEV=dev.kraken.com
export KRAKEN_REMOTE_DEV_HOME=/home/$USER

export ZSH_THEME="spaceship"
export ZSH=$HOME/.oh-my-zsh
export ZSH_CUSTOM=$ZSH/custom
export ARCHFLAGS="-arch x86_64"
export GOPATH=$HOME/projects/go
export MONO_GAC_PREFIX=$USER_LOCAL
export NVM_DIR=$HOME/.nvm
export POWERLEVEL9K_INSTALLATION_PATH=$ZSH_CUSTOM/themes
export POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S \uE868  %d.%m.%y}"
export POWERLEVEL9K_PROMPT_ON_NEWLINE=true
export POWERLEVEL9K_RPROMPT_ON_NEWLINE=true
export POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="↱"
export POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="↳ "

export AUTOENV_DEBUG=0
export JB_ZSH_DEBUG=1

# Set debug level. If enabled (> 0) it will print information to stderr.
# 	0: no debug messages (Default)
# 	1: generic debug logging
# 	2: more verbose messages
# 		messages about adding/removing files on the internal stack
# 	3: everything
# 		sets xtrace option (set -x) while sourcing env files
_jb_zsh_debug() {
  local level=${2:-1}
  if (( JB_ZSH_DEBUG < level )); then
    return
  fi
  local msg="$1"  # Might trigger a bug in Zsh 5.0.5 with shwordsplit.
  # Load zsh color support.
  if [[ -z $color ]]; then
    autoload colors
    colors
  fi
  # Build $indent prefix.
  local indent=
  if [[ $_jb_zsh_debug_indent -gt 0 ]]; then
    for i in {1..${_jb_zsh_debug_indent}}; do
      indent="  $indent"
    done
  fi

  # Split $msg by \n (not newline).
  lines=(${(ps:\\n:)msg})
  for line in $lines; do
    echo -n "${fg_bold[blue]}[jb-zsh-config]${fg_no_bold[default]}	" >&2
    echo ${indent}${line} >&2
  done
}

_handle-add-path() {
	local incoming_path="$1"
	# Check if $incoming_path exists.
	if [ -d "$incoming_path" ]; then
		# Control will enter here if $incoming_path exists.
		# My check to make sure the new node path is added to the PATH variable
		if [[ "$PATH" != *"$incoming_path"* ]]; then
			# Check if $PATH is set
			if [ -z ${PATH+x} ]; then
				# Control will enter here if $PATH is not set.
				export PATH="$incoming_path"
			else
				# Control will enter here if $PATH is set.
				export PATH="$incoming_path:$PATH"
			fi
		fi
	else
		# Control will enter here if $incoming_path doesn't exist.
		# Check if we have $JB_ZSH_DEBUG set to true
		_jb_zsh_debug "[PATH DEBUG]: 	$incoming_path doesn't exist. Not adding to PATH"
	fi
}

_handle-add-manpath() {
	local incoming_path="$1"
	# Check if $incoming_path exists.
	if [ -d "$incoming_path" ]; then
		# Control will enter here if $incoming_path exists.
		# My check to make sure the new pkg config path is added to the MANPATH variable
		if [[ "$MANPATH" != *"$incoming_path"* ]]; then
			# Check if $MANPATH is set
			if [ -z ${MANPATH+x} ]; then
				# Control will enter here if $MANPATH is not set.
				export MANPATH="$incoming_path"
			else
				# Control will enter here if $MANPATH is set.
				export MANPATH="$incoming_path:$MANPATH"
			fi
		fi
	else
		# Control will enter here if $incoming_path doesn't exist.
		# Check if we have $JB_ZSH_DEBUG set to true
		_jb_zsh_debug "[MANPATH DEBUG]: 	$incoming_path doesn't exist. Not adding to MANPATH"
	fi
}

_handle-add-pkgconfigpath() {
	local incoming_path=/usr/local/opt/$1/lib/pkgconfig
	# Check if $incoming_path exists.
	if [ -d "$incoming_path" ]; then
		# Control will enter here if $incoming_path exists.
		# My check to make sure the new pkg config path is added to the PKG_CONFIG_PATH variable
		if [[ "$PKG_CONFIG_PATH" != *"$incoming_path"* ]]; then
			# Check if $PKG_CONFIG_PATH is set
			if [ -z ${PKG_CONFIG_PATH+x} ]; then
				# Control will enter here if $PKG_CONFIG_PATH is not set.
				export PKG_CONFIG_PATH="$incoming_path"
			else
				# Control will enter here if $PKG_CONFIG_PATH is set.
				export PKG_CONFIG_PATH="$incoming_path:$PKG_CONFIG_PATH"
			fi
		fi
	else
		# Control will enter here if $incoming_path doesn't exist.
		# Check if we have $JB_ZSH_DEBUG set to true
		_jb_zsh_debug "[PKG_CONFIG_PATH DEBUG]: 	$incoming_path doesn't exist."
		# Check if brew is a command. If so, suggest installing with brew
		if which brew &> /dev/null; then
			_jb_zsh_debug "[PKG_CONFIG_PATH DEBUG]: 	Suggestion => \"brew install $1\"" 2
		fi
	fi
}

_load-nvmrc() {
	local node_version="$(nvm version)"
	local nvmrc_path="$(nvm_find_nvmrc)"

	if [ -n "$nvmrc_path" ]; then
		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		if [ "$nvmrc_node_version" = "N/A" ]; then
			nvm install
		elif [ "$nvmrc_node_version" != "$node_version" ]; then
			nvm use --delete-prefix
		fi
	elif [ "$node_version" != "$(nvm version default)" ]; then
		echo "Reverting to nvm default version"
		nvm use --delete-prefix default
	fi

	_handle-add-path "$NVM_DIR/versions/node/$(nvm version)/bin"
}

# Less
# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-g -i -M -R -S -w -z-4'
# export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
	if [[ "$OSTYPE" == darwin* ]]; then
		# echo "------- DARWIN SYSTEM --------"
		export LESSOPEN="|/usr/local/bin/lesspipe.sh %s" LESS_ADVANCED_PREPROCESSOR=1
	else
		# echo "------- NON-DARWIN SYSTEM --------"
		export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
	fi
fi

# If you come from bash you might have to change your $PATH.
# _handle-add-path $SYS_FRWKS_PATH/Python.framework/Versions/$PYTHON_VERSION/bin
_handle-add-path $USER_LOCAL_FRWKS/Python.framework/Versions/$PYTHON_VERSION/bin
_handle-add-path $USER_LOCAL_OPT/gettext/bin
_handle-add-path $USER_LOCAL_OPT/llvm/bin
_handle-add-path $USER_LOCAL_OPT/apr/bin
_handle-add-path $USER_LOCAL_OPT/apr-util/bin
_handle-add-path $USER_LOCAL_OPT/icu4c/bin
_handle-add-path $USER_LOCAL_OPT/icu4c/sbin
_handle-add-path $USER_LOCAL_OPT/libpq/bin
_handle-add-path $USER_LOCAL_OPT/coreutils/libexec/gnubin
_handle-add-path $USER_LOCAL_OPT/sqlite/bin
_handle-add-path $USER_LOCAL_OPT/go/libexec/bin
_handle-add-path $USER_LOCAL_OPT/gnu-tar/libexec/gnubin
_handle-add-path $USER_LOCAL_OPT/libarchive/bin
_handle-add-path $USER_LOCAL_OPT/openssl/bin
_handle-add-path $(yarn global bin)
_handle-add-path $(go env GOPATH)/bin
_handle-add-path $USER_LOCAL_GO/bin
_handle-add-path $USER_LOCAL_OPT/go/libexec/bin
_handle-add-path $PERL_LOCAL_LIB_ROOT/bin

_handle-add-manpath $USER_LOCAL_OPT/gnu-tar/libexec/gnuman
_handle-add-manpath $USER_LOCAL_OPT/coreutils/libexec/gnuman

_handle-add-pkgconfigpath libffi
_handle-add-pkgconfigpath icu4c
_handle-add-pkgconfigpath libpq
_handle-add-pkgconfigpath sqlite
_handle-add-pkgconfigpath libarchive
_handle-add-pkgconfigpath openssl


if [ ! -d $ZSH_CUSTOM/themes/powerlevel9k ]; then
	mkdir -p $ZSH_CUSTOM/themes/powerlevel9k
	git clone https://github.com/bhilburn/powerlevel9k $ZSH_CUSTOM/themes/powerlevel9k
fi

if [ ! -d $ZSH_CUSTOM/themes/spaceship-prompt ]; then
	mkdir -p $ZSH_CUSTOM/themes/spaceship-prompt
	git clone https://github.com/denysdovhan/spaceship-prompt $ZSH_CUSTOM/themes/spaceship-prompt
fi

# Paths
# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path
# Set the list of directories that cd searches.
cdpath=(
	$cdpath
)
# Set the list of directories that Zsh searches for programs.
path=(
	/usr/local/{bin,sbin}
	$path
)

fpath=(
	$HOME/.config/completion
	$USER_LOCAL_ETC/bash_completion.d
	$USER_LOCAL_SHARE/zsh-completions
	$USER_LOCAL_SHARE/zsh/site-functions
	$fpath
)

#  rm -f ~/.zcompdump; compinit
#  chmod go-w '$USER_LOCAL_SHARE'

source $JB_ZSH_BASE/zsh/plugins/nvm.plugin.zsh
source $JB_ZSH_BASE/zsh/plugins/npx.plugin.zsh
source $HOME/.gvm/scripts/gvm
source $HOME/.local/share/fonts/*.sh
source $HOME/antigen/antigen.zsh
source $POWERLEVEL9K_INSTALLATION_PATH/spaceship-prompt/spaceship.zsh-theme

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Which plugins would you like to load? (plugins can be found in $HOME/.oh-my-zsh/plugins/*)
# Custom plugins may be added to $HOME/.oh-my-zsh/custom/plugins/
antigen bundles <<EOBUNDLES
	autoenv
	archlinux
	battery
	command-not-found
	dotenv
	encode64
	history
	history-substring-search
	iterm2
	iwhois
	extract
	git
	git-extras
	git-prompt
	git-remote-branch
	github
	gpg-agent
	profile
	brew
	zsh-brew-services
	ssh-agent
	ruby
	gem
	rbenv
	rsync
	go
	golang
	jsontools
	perl
	# postgres
	profiles
	sudo
	yarn
	man
	nanoc
	vscode
	xcode
	z
	zsh_reload
	zsh-navigation-tools

	# Python Plugins
	pip
	python
	virtualenv

	# OS specific plugins
	cygwin
	debian
	# ubuntu
	gnu-utils
	osx

	# archlinux
	systemadmin
	systemd
EOBUNDLES

# Syntax highlighting bundle.
antigen bundle zsh-users/zsh-history-substring-search 			# https://github.com/zsh-users/zsh-history-substring-search
antigen bundle zsh-users/zsh-autosuggestions          			# https://github.com/zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions										# https://github.com/zsh-users/zsh-completions
# antigen bundle psprint/zsh-navigation-tools 		  					# https://github.com/psprint/zsh-navigation-tools
antigen bundle djui/alias-tips        											# https://github.com/djui/alias-tips
antigen bundle jocelynmallon/zshmarks 											# https://github.com/jocelynmallon/zshmarks
antigen bundle Joaquin6/git-aliases   											# https://github.com/Joaquin6/git-aliases
antigen bundle Tarrasch/zsh-autoenv   											# https://github.com/Tarrasch/zsh-autoenv
# antigen bundle gko/ssh-connect															# https://github.com/gko/ssh-connect
# antigen bundle zpm-zsh/ssh																	# https://github.com/zpm-zsh/ssh
antigen bundle bobsoppe/zsh-ssh-agent												# https://github.com/bobsoppe/zsh-ssh-agent
antigen bundle zsh-users/zsh-syntax-highlighting      			# https://github.com/zsh-users/zsh-syntax-highlighting
# antigen bundle bhilburn/powerlevel9k 											# https://github.com/bhilburn/powerlevel9k

# Suuply the theme - https://denysdovhan.com/spaceship-prompt/
antigen theme spaceship
																														# https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions
																														# https://github.com/denysdovhan/spaceship-prompt/blob/master/docs/API.md
# antigen theme https://github.com/denysdovhan/spaceship-prompt spaceship
# Tell antigen that you're done.
antigen apply

# User configuration

source $HOME/.zsh_aliases
source $HOME/.zsh_functions

# All options must be overridden in your .zshrc file after the theme.
export ZSH_HIGHLIGHT_URL_HIGHLIGHTER_TIMEOUT=4
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern url)
export ZSH_HIGHLIGHT_STYLES[url-good]='fg=blue,bold'
export ZSH_HIGHLIGHT_STYLES[url-bad]='fg=magenta,bold'
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=green,bold'

# Spaceship Prompt Options -  https://github.com/denysdovhan/spaceship-prompt/blob/master/docs/Options.md
export SPACESHIP_PROMPT_ORDER=(
  user          # Username section
  dir           # Current directory section
  host          # Hostname section
  git           # Git section (git_branch + git_status)
  package       # Package version
  node          # Node.js section
  ruby          # Ruby section
  golang        # Go section
  php           # PHP section
  docker        # Docker section
  aws           # Amazon Web Services section
  venv          # virtualenv section
  pyenv         # Pyenv section
  exec_time     # Execution time
  line_sep      # Line break
	battery       # Battery level and status
  vi_mode       # Vi-mode indicator
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)

export SPACESHIP_RPROMPT_ORDER=(
	time          # Time stampts section
)

export SPACESHIP_TIME_SHOW=true
export SPACESHIP_TIME_12HR=true

if which brew &> /dev/null; then
	BREW_PREFIX="$(brew --prefix)"
	_handle-add-manpath "$BREW_PREFIX/bin"
	_handle-add-manpath "$BREW_PREFIX/sbin"
	_handle-add-manpath "$BREW_PREFIX/share/man"
	if [ -z ${INFOPATH+x} ]; then
		export INFOPATH="$BREW_PREFIX/share/info"
	else
		export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"
	fi
	if [ -f $BREW_PREFIX/etc/bash_completion ]; then
		. $BREW_PREFIX/etc/bash_completion
	fi
fi

if [ ! -d $PERL_LOCAL_LIB_ROOT ]; then
	export PERL_MM_OPT="INSTALL_BASE=$PERL_LOCAL_LIB_ROOT" cpan local::lib
	export PERL_MB_OPT="--install_base \"$PERL_LOCAL_LIB_ROOT\""
	eval "$(perl -I$PERL5LIB -Mlocal::lib=$PERL_LOCAL_LIB_ROOT)"
fi

if [ -f $USER_LOCAL_BIN/virtualenvwrapper.sh ]; then
	source $USER_LOCAL_BIN/virtualenvwrapper.sh
	export WORKON_HOME=$HOME/Code/VirtualEnvs
fi

if [ -f $HOME/.iterm2_shell_integration.zsh ]; then
	source $HOME/.iterm2_shell_integration.zsh
fi

autoload -U compinit && compinit -i
autoload -U promptinit && promptinit -i
autoload -U add-zsh-hook

add-zsh-hook chpwd _load-nvmrc
_load-nvmrc

# Set Spaceship ZSH as a prompt
autoload -U promptinit; promptinit
prompt spaceship
