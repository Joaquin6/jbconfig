.DEFAULT_GOAL := help
environment = "inlined"
DIR=$(PWD)
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_ALL=en_US.UTF-8
# Since we rely on paths relative to the makefile location, abort if@$(MAKE) isn't being run from there.
$(if $(findstring /,$(MAKEFILE_LIST)),$(error Please only invoke this makefile from the directory it resides in))
# The files that need updating when incrementing the version number.
VERSIONED_FILES 	:= README.md package.json
# Define all shells to test with. Can be overridden with @$(MAKE) SHELLS=... <target>`.
SHELLS := sh bash zsh # ksh (#574)
# Generate 'test-<shell>' target names from specified shells.
# The embedded shell names are extracted on demand inside the recipes.
SHELL_TARGETS 	:= $(addprefix /bin/,$(SHELLS))
SHELL     		= /bin/zsh
PREFIX    		= /usr/local
CRAM_OPTS 		?= -v
IS_MAC_OS 		= false
SYSTEM 			= $(shell uname -s)
USER 			= $(shell whoami)
LDFLAGS 		= $(libgl) -lpng -lz -lm

# macOS System Paths
USERS_PATH 			= /Users
VOLUMES_PATH 		= /Volumes
LIB_PATH 			= /Library
APPLICATIONS_PATH	= /Applications

USER_PATH 					= $(USERS_PATH)/$(USER)
USER_CACHES_PATH 			= $(USER_PATH)/Library/Caches
USER_CONTAINERS_PATH		= $(USER_PATH)/Library/Containers
USER_DOCKER_CONTAINER_PATH	= $(USER_CONTAINERS_PATH)/com.docker.docker

LIB_FRAMEWORKS_PATH ?= $(LIB_PATH)/Frameworks
WD_MY_BOOK_PATH		= $(VOLUMES_PATH)/WD\ MY\ BOOK
WMB_IS_MOUNTED 		= false

ACC_PATH = $(APPLICATIONS_PATH)/Adobe\ Creative\ Cloud
AEM_PATH = $(APPLICATIONS_PATH)/Adobe\ Extension\ Manager\ CC
AADC_PATH = $(APPLICATIONS_PATH)/Adobe\ Acrobat\ DC

# macOS Python Paths
PYTHONFRAMEWORK 	?= $(LIB_FRAMEWORKS_PATH)/Python.framework
PYTHONVERSIONS 		?= $(PYTHONFRAMEWORK)/Versions
PYTHONCURRENT 		?= $(PYTHONVERSIONS)/Current
PYTHONPATH 			?= $(PYTHONCURRENT)/bin

COM_COLOR   = \033[0;34m
OBJ_COLOR   = \033[0;36m
OK_COLOR    = \033[0;32m
ERROR_COLOR = \033[0;31m
WARN_COLOR  = \033[0;33m
NO_COLOR    = \033[m

OK_STRING    = "[OK]"
ERROR_STRING = "[ERROR]"
WARN_STRING  = "[WARNING]"

GIT_USERNAME 		=Joaquin6
GITSSH 				=git@github.com:$(GIT_USERNAME)
GITHTTPS 			=https://github.com/$(GIT_USERNAME)

BANNER_SEP    =$(shell printf '%*s' 70 | tr ' ' '\#')
BANNER_TEXT   =This file was autogenerated by \`make\`. Do not edit it directly!
BANNER        =${BANNER_SEP}\n\# ${BANNER_TEXT}\n${BANNER_SEP}\n
HEADER_TEXT   =\# JBConfig: A simple plugin manager for zsh\n\
\# Author: Joaquin Briceno\n\

PROJECT   				?= $(CURDIR)
NVM_DIR 				= ~/.nvm
RBENV_ROOT 				:= ~/.rbenv
CONFIG_ROOT 			= ~/.config
ADOTDIR 				= ~/.antigen
LOG_FILENAME   			= jbconfig.log
ZSH 					= ~/.oh-my-zsh
DEPOT_TOOLS 			= ~/depot_tools
VIMRC_RUNTIME 			= ~/.vim_runtime
FONT_PATH 				= ~/.local/share/fonts
PROJECTS_PATH 			= ~/projects
POWERLEVEL9K_PATH 		= ~/powerlevel9k
POWERLEVEL10K_PATH 		= ~/powerlevel10k
USER_LOCAL 				= $(PREFIX)
USER_LOCAL_LIB 			?= $(USER_LOCAL)/lib
USER_LOCAL_TMP 			?= $(USER_LOCAL)/tmp
USER_LOCAL_OPT 			?= $(USER_LOCAL)/opt
USER_LOCAL_VAR 			?= $(USER_LOCAL)/var
USER_LOCAL_SHARE 		?= $(USER_LOCAL)/share
USER_LOCAL_INCLUDE 		?= $(USER_LOCAL)/include
USER_LOCAL_MICROSOFT 	?= $(USER_LOCAL)/microsoft

# JBCONFIG Specific Variables
JBCONFIG_ZSH_PATH 				= $(DIR)/zsh
JBCONFIG_TOOLS_PATH 			= $(DIR)/tools
JBCONFIG_SCRIPTS_PATH 			= $(DIR)/scripts
JBCONFIG_LOG_FILENAME   		= $(LOG_FILENAME)
JBCONFIG_PROJECTS_PATH 			= $(PROJECTS_PATH)
JBCONFIG_WD_MY_BOOK 			= $(WD_MY_BOOK_PATH)
JBCONFIG_LOG_FILE   			= ${DIR}/$(JBCONFIG_LOG_FILENAME)
JBCONFIG_CELLAR_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(PREFIX)/Cellar
JBCONFIG_CASKROOM_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(PREFIX)/Caskroom
JBCONFIG_HOMEBREW_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(PREFIX)/Homebrew
JBCONFIG_LIB_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_LIB)
JBCONFIG_TMP_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_TMP)
JBCONFIG_VAR_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_VAR)
JBCONFIG_SHARE_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_SHARE)
JBCONFIG_INCLUDE_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_INCLUDE)
JBCONFIG_MICROSOFT_PATH 		= $(JBCONFIG_WD_MY_BOOK)$(USER_LOCAL_MICROSOFT)
JBCONFIG_DOCKER_APP 			= $(WD_MY_BOOK_PATH)$(APPLICATIONS_PATH)/Docker.app
JBCONFIG_KAIZEN_APP 			= $(WD_MY_BOOK_PATH)$(APPLICATIONS_PATH)/kaizen/kaizen.sh
JBCONFIG_ACC_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(ACC_PATH)
JBCONFIG_AEM_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(AEM_PATH)
JBCONFIG_AADC_PATH 				= $(JBCONFIG_WD_MY_BOOK)$(AADC_PATH)
JBCONFIG_CACHES_PATH 			= $(JBCONFIG_WD_MY_BOOK)$(USER_CACHES_PATH)
JBCONFIG_CONTAINERS_PATH		= $(JBCONFIG_WD_MY_BOOK)$(USER_CONTAINERS_PATH)
JBCONFIG_DOCKER_CONTAINER_PATH	= $(JBCONFIG_WD_MY_BOOK)$(USER_DOCKER_CONTAINER_PATH)

GOPATH 						=$(PROJECTS_PATH)/go
GITHUBPATH 					=$(PROJECTS_PATH)/github.com
GITLABPATH 					=$(PROJECTS_PATH)/gitlab.com
GITHUBGOPATH 				=$(GOPATH)/src/github.com
BITBUCKETPATH 				=$(PROJECTS_PATH)/bitbucket.org
GIT_USER_PATH 				=$(GITHUBPATH)/$(GIT_USERNAME)
DIRENV_USER_PATH 			=$(GIT_USER_PATH)/direnv
OMZ_USER_PATH 				=$(GIT_USER_PATH)/oh-my-zsh
POWERLINE_USER_PATH 		=$(GIT_USER_PATH)/powerline
POWERLEVEL9K_USER_PATH 		=$(GIT_USER_PATH)/powerlevel9k
POWERLEVEL10K_USER_PATH 	=$(GIT_USER_PATH)/powerlevel10k
VIMRC_USER_PATH 			=$(GIT_USER_PATH)/vimrc
MAXIMUM_AWESOME_USER_PATH 	=$(GIT_USER_PATH)/maximum-awesome

PROJECT_SUBPATHS =$(GITHUBPATH) $(GITLABPATH) $(BITBUCKETPATH) $(GITHUBGOPATH)

IS_MAC_OS=false
libgl=-lGL -lglut
FONT_DROID_SANS_MONO="Droid Sans Mono for Powerline Nerd Font Complete.otf"
BREWCMD=$(shell which brew)

HOMEBREW_VISUAL		:= vim
HOMEBREW_PREFIX		= $(shell brew --prefix)
HOMEBREW_PATH 		= $(HOMEBREW_PREFIX)
HOMEBREW_BIN_PATH 	= $(HOMEBREW_PATH)/bin
HOMEBREW_CELLAR 	= $(HOMEBREW_PATH)/Cellar
HOMEBREW_HOME_PATH 	= $(HOMEBREW_PATH)

ifeq ($(SYSTEM), Linux)
	HOMEBREW_LINUX 		=/home/linuxbrew
	HOMEBREW_PATH 		=$(HOMEBREW_LINUX)/.linuxbrew
	HOMEBREW_BIN_PATH 	=$(HOMEBREW_LINUX)/.linuxbrew/bin
	HOMEBREW_HOME_PATH 	=$(HOMEBREW_LINUX)/.linuxbrew
endif

HOMEBREW_PATHS = $(HOMEBREW_HOME_PATH)/etc $(HOMEBREW_HOME_PATH)/include \
	$(HOMEBREW_HOME_PATH)/lib $(HOMEBREW_HOME_PATH)/opt $(HOMEBREW_HOME_PATH)/sbin \
	$(HOMEBREW_HOME_PATH)/share $(HOMEBREW_HOME_PATH)/var \
	$(HOMEBREW_HOME_PATH)/var/homebrew/linked $(HOMEBREW_HOME_PATH)/Cellar

ifeq ($(SYSTEM), Darwin)
	IS_MAC_OS=true
	FONT_PATH=~/Library/Fonts
	libgl=-framework OpenGL -framework GLUT
	ITERM_SUPPORT=~/Library/Application\ Support/iTerm2
	ITERM_SCRIPTS=$(ITERM_SUPPORT)/scripts
	ITERM_DYNAMIC_PROFILES=$(ITERM_SUPPORT)/DynamicProfiles
endif

define ised
	sed $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

define isede
	sed -E $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

AWSCMD 				= $(shell which aws)
AWSCOMPLETERCMD		= $(shell which aws_completer)
ANTIGENCMD			= $(shell which antigen)
SHELLCHECKCMD		= $(shell which shellcheck)
PYTHONCMD 			= $(shell which python)
PYTHON3CMD 			= $(shell which python3)
COLORLSCMD 			= $(shell which colorls)
NVM 				:= $(shell test -f "$(HOME)/.nvm/nvm.sh"; echo $$?)

# $(call process-includes, input-file, output-file)
#   Remove tabs, expand macros, and process include directives.
define process-includes
  expand $1 |                                                   \
  $(M4) --prefix-builtins --include=text $(m4-macros) - |       \
  $(process-pgm) > $2
endef

# Lists all targets defined in this makefile.
.PHONY: list
list:
	@$(MAKE) -pRrn : -f $(MAKEFILE_LIST) 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | sort

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

default: help

show-env: ## echo the environment variable value
	@echo $(ENV_VARS)

show-envs: ## echo all environment variables
	@echo $(env)

show-system-env:
	@$(MAKE) show-env ENV_VARS=$(SYSTEM)

show-user-env:
	@$(MAKE) show-env ENV_VARS=$(USER)

show-path: ## echo PATH environment variables
	@echo $(PATH)

rmrf:
	[ -s $(SRC) ] && rm -rf $(SRC)

symlinks: ## create system link from jbconfig files to home directory
	@ln -sf $(JBCONFIG_ZSH_PATH)/.profile ~/.profile
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zlogin ~/.zlogin
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zlogout ~/.zlogout
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zprofile ~/.zprofile
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zaliases ~/.zaliases
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zfunctions ~/.zfunctions
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zshenv ~/.zshenv
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zshrc ~/.zshrc
	@ln -sf $(JBCONFIG_ZSH_PATH)/.antigenrc ~/.antigenrc

# System Links for Mac OS
ifeq (${SYSTEM}, Darwin)
symlink-usr-local-lib: ## create lib system link from WD MY BOOK Volume to usr/local/lib directory
	if [ -d /usr/local/lib ]; then sudo mv /usr/local/lib $(JBCONFIG_LIB_PATH); fi
	if [ -d $(JBCONFIG_LIB_PATH) ]; then ln -s $(JBCONFIG_LIB_PATH) /usr/local/lib ; fi
symlink-usr-local-tmp: ## create tmp system link from WD MY BOOK Volume to usr/local/tmp directory
	if [ -d /usr/local/tmp ]; then sudo mv /usr/local/tmp $(JBCONFIG_TMP_PATH); fi
	if [ -d $(JBCONFIG_TMP_PATH) ]; then ln -s $(JBCONFIG_TMP_PATH) /usr/local/tmp ; fi
symlink-usr-local-var: ## create var system link from WD MY BOOK Volume to usr/local/var directory
	if [ -d /usr/local/var ]; then sudo mv /usr/local/var $(JBCONFIG_VAR_PATH); fi
	if [ -d $(JBCONFIG_VAR_PATH) ]; then ln -s $(JBCONFIG_VAR_PATH) /usr/local/var ; fi
symlink-usr-local-share: ## create share system link from WD MY BOOK Volume to usr/local/share directory
	if [ -d /usr/local/share ]; then sudo mv /usr/local/share $(JBCONFIG_SHARE_PATH); fi
	if [ -d $(JBCONFIG_SHARE_PATH) ]; then ln -s $(JBCONFIG_SHARE_PATH) /usr/local/share ; fi
symlink-usr-local-include: ## create include system link from WD MY BOOK Volume to usr/local/include directory
	if [ -d /usr/local/include ]; then sudo mv /usr/local/include $(JBCONFIG_INCLUDE_PATH); fi
	if [ -d $(JBCONFIG_INCLUDE_PATH) ]; then ln -s $(JBCONFIG_INCLUDE_PATH) /usr/local/include ; fi
symlink-usr-local-microsoft: ## create Microsoft system link from WD MY BOOK Volume to usr/local/microsoft directory
	if [ -d /usr/local/microsoft ]; then sudo mv /usr/local/microsoft $(JBCONFIG_MICROSOFT_PATH); fi
	if [ -d $(JBCONFIG_MICROSOFT_PATH) ]; then ln -s $(JBCONFIG_MICROSOFT_PATH) /usr/local/microsoft ; fi
symlink-usr-local: symlink-usr-local-lib symlink-usr-local-tmp symlink-usr-local-share \
	symlink-usr-local-include symlink-usr-local-microsoft
endif

# Homebrew System Links for Mac OS
ifeq (${SYSTEM}, Darwin)
symlink-homebrew-cellar: ## create Cellar system link from WD MY BOOK Volume to usr/local/Cellar directory
	if [ -d /usr/local/Cellar ]; then sudo mv /usr/local/Cellar $(JBCONFIG_CELLAR_PATH); fi
	if [ -d $(JBCONFIG_CELLAR_PATH) ]; then ln -s $(JBCONFIG_CELLAR_PATH) /usr/local/Cellar; fi
symlink-homebrew-caskroom: ## create Caskroom system link from WD MY BOOK Volume to usr/local/Caskroom directory
	if [ -d /usr/local/Caskroom ]; then sudo mv /usr/local/Caskroom $(JBCONFIG_CASKROOM_PATH); fi
	if [ -d $(JBCONFIG_CASKROOM_PATH) ]; then ln -s $(JBCONFIG_CASKROOM_PATH) /usr/local/Caskroom ; fi
symlink-homebrew-path: ## create Homebrew system link from WD MY BOOK Volume to usr/local/Homebrew directory
	if [ -d /usr/local/Homebrew ]; then sudo mv /usr/local/Homebrew $(JBCONFIG_HOMEBREW_PATH); fi
	if [ -d $(JBCONFIG_HOMEBREW_PATH) ]; then ln -s $(JBCONFIG_HOMEBREW_PATH) /usr/local/Homebrew ; fi
endif

# Adobe Suite System Links for Mac OS
ifeq (${SYSTEM}, Darwin)
symlink-acc-path: ## create ACC system link from WD MY BOOK ACC to Applications/Adobe Creative Cloud
	if [ -d $(JBCONFIG_ACC_PATH) ]; then ln -s $(JBCONFIG_ACC_PATH) $(ACC_PATH); fi
symlink-aem-path: ## create AEM system link from WD MY BOOK ACC to Applications/Adobe Extension Manager CC
	if [ -d $(JBCONFIG_AEM_PATH) ]; then ln -s $(JBCONFIG_AEM_PATH) $(AEM_PATH); fi
symlink-aadc-path: ## create AADC system link from WD MY BOOK ACC to Applications/Adobe Acrobat DC
	if [ -d $(JBCONFIG_AADC_PATH) ]; then ln -s $(JBCONFIG_AADC_PATH) $(AADC_PATH); fi
symlink-adobe: symlink-acc-path symlink-aem-path symlink-aadc-path
endif

prepare-project-directories: $(PROJECT_SUBPATHS)
	@mkdir -p $(PROJECT_SUBPATHS)

clone:
	mkdir -p $(GIT_USER_PATH);
	if [ ! -d $(GIT_USER_PATH)/$(REPOSITORY) ]; then git clone --single-branch --branch $(BRANCH) $(GITSSH)/$(REPOSITORY).git $(GIT_USER_PATH)/$(REPOSITORY) $(GIT_FLAGS); fi

mongo:
	@curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz
	@curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz.sig
	@curl -LO https://www.mongodb.org/static/pgp/server-3.4.asc
	@gpg --import server-3.4.asc
	@gpg --verify mongodb-osx-ssl-x86_64-3.4.9.tgz.sig mongodb-osx-ssl-x86_64-3.4.9.tgz

cask:
	@echo '	Installing Cask...'
ifeq (${SYSTEM}, Linux)
	apt-get install emacs
endif
	curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python3

depot-tools:
	if [ ! -d $(DEPOT_TOOLS) ]; then git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $(DEPOT_TOOLS); fi
	export PATH=$(DEPOT_TOOLS):$(PATH);
	@$(MAKE) show-path

git-config:
	chmod +x $(DIR)/scripts/git/configure.sh
	@exec $(DIR)/scripts/git/configure.sh

direnv:
	@echo '	Installing DirENV...'
	@$(MAKE) clone REPOSITORY=direnv BRANCH=master
	pushd $(GIT_USER_PATH)/direnv; make install; popd

install-kubectl-plugins:
	@echo '	Installing KubeCtl Plugins...'
	chmod +x ./tools/kubectl/plugins/kubectl-*
	mv ./tools/kubectl/plugins/kubectl-* /usr/local/bin

awscli:
	@echo '	Installing AWS CLI...'
	@curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
	@sudo installer -pkg AWSCLIV2.pkg -target /

remove-awscli:
	@echo '	Removing AWS CLI...'
	ls -l $(AWSCMD)
	sudo rm -rf $(AWSCMD)
	sudo rm -rf $(AWSCOMPLETERCMD)
	sudo rm -rf /usr/local/aws-cli

nvm: ## if NVM is not installed, clone NVM to ~/.nvm
ifneq ($(NVM),0)
	@echo '	Installing NVM...'
	chmod +x $(DIR)/scripts/install/*.sh
	exec $(DIR)/scripts/install/nvm.sh
	@echo '	Successfully Installed NVM!'
else
	@echo ' NVM is already installed'
endif

ohmyzsh: ## clone antigen to ~/.oh-ny-zsh
	if [ ! -d $(ZSH) ]; then git clone https://github.com/ohmyzsh/ohmyzsh.git $(ZSH); fi

zsh-dracula-theme: ## setup dracula pro theme for zsh
	if [ ! -f $(ZSH)/themes/dracula-pro.zsh-theme ]; then cp $(DIR)/zsh/themes/dracula-pro.zsh-theme $(ZSH)/themes/dracula-pro.zsh-theme; fi

antigen: ## clone antigen to ~/.antigen
	if [ ! -d $(ADOTDIR) ]; then git clone https://github.com/zsh-users/antigen.git $(ADOTDIR); fi

antigen-hard:
	@echo '	Hard Installing Antigen...'
	@$(MAKE) rmrf SRC=$(ADOTDIR)
	@$(MAKE) antigen

fix-homebrew-paths: $(HOMEBREW_PATHS)
	mkdir -p $(HOMEBREW_PATHS)
	chown -R $(shell whoami) $(HOMEBREW_PATHS)

update-antigen: ## Update antigen version to latest
	@echo '	Updating Antigen...'
	cd -P $(ADOTDIR) && git checkout . && git pull origin develop && make build && make install;
	cd $(DIR)
	make refresh

.PHONY: antigen-check
antigen-check: antigen zsh-dracula-theme zshmarks antigen-url-highlighter antigen-autosuggestions zsh-defer

zshmarks: ## Clone zshmarks
	@echo '	Installing Zshmarks...'
	@mkdir -p $(ZSH)/custom/plugins
	if [ ! -d $(ZSH)/custom/plugins/zshmarks ]; then git clone https://github.com/jocelynmallon/zshmarks.git $(ZSH)/custom/plugins/zshmarks; fi

powerline: ## Clone Powerline
	@echo '	Installing Powerline...'
	chmod +x $(DIR)/scripts/install/*.sh
	exec $(DIR)/scripts/install/powerline.sh

powerlevel9k: ## Clone Powerlevel9k
	@echo '	Installing Powerlevel9k...'
	chmod +x $(DIR)/scripts/install/*.sh
	exec $(DIR)/scripts/install/powerlevel9k.sh

powerlevel10k: ## Clone Powerlevel10k
	@echo '	Installing Powerlevel10k...'
	chmod +x $(DIR)/scripts/install/*.sh
	exec $(DIR)/scripts/install/powerlevel10k.sh

maximum-awesome:
	@echo '	Installing Maximum Awesome...'
	@$(MAKE) clone REPOSITORY=maximum-awesome BRANCH=master
	cd $(GIT_USER_PATH)/maximum-awesome; git checkout . && git pull origin master && rake

spaceship-prompt: ## Clone Spaceship Prompt for Oh-My-Zsh
	if [ ! -d $(ZSH)/custom/themes/spaceship-prompt ]; then git clone https://github.com/denysdovhan/spaceship-prompt.git $(ZSH)/custom/themes/spaceship-prompt --depth=1; fi

vimrc: ## Clone amix/vimrc
	@echo '	Installing Vimrc...'
	if [ ! -d $(VIMRC_RUNTIME) ]; then git clone https://github.com/amix/vimrc.git $(VIMRC_RUNTIME); fi
	cd $(VIMRC_RUNTIME); git checkout . && git pull origin master
	chmod +x $(VIMRC_RUNTIME)/install_awesome_vimrc.sh
	@exec $(VIMRC_RUNTIME)/install_awesome_vimrc.sh

antigen-history-substring-search: ## setup history-substring-search for antigen
	@echo '	Installing Antigen History Substring Search...'
	@mkdir -p $(ZSH)/custom/plugins
	if [ ! -d $(ZSH)/custom/plugins/zsh-history-substring-search ]; then git clone https://github.com/zsh-users/zsh-history-substring-search $(ZSH)/custom/plugins/zsh-history-substring-search; fi

antigen-syntax-highlighting: ## setup syntax-highlighting for antigen
	@echo '	Installing Antigen Syntax Highlighting...'
	@mkdir -p $(ZSH)/custom/plugins
	if [ ! -d $(ZSH)/custom/plugins/zsh-syntax-highlighting ]; then git clone https://github.com/zsh-users/zsh-syntax-highlighting $(ZSH)/custom/plugins/zsh-syntax-highlighting; fi

antigen-url-highlighter: ## setup url-highlighter for antigen
	@echo '	Installing Antigen URL Highlighter...'
	@mkdir -p $(ZSH)/custom/plugins
	@mkdir -p $(ADOTDIR)/bundles/zsh-users/zsh-syntax-highlighting/highlighters
	if [ ! -d $(ZSH)/custom/plugins/zsh-url-highlighter ]; then git clone https://github.com/ascii-soup/zsh-url-highlighter.git $(ZSH)/custom/plugins/zsh-url-highlighter; fi
	@rm -rf $(ADOTDIR)/bundles/zsh-users/zsh-syntax-highlighting/highlighters/url
	@ln -sf $(ZSH)/custom/plugins/zsh-url-highlighter/url $(ADOTDIR)/bundles/zsh-users/zsh-syntax-highlighting/highlighters/url

antigen-autosuggestions: ## setup autosuggestions for antigen
	@echo '	Installing Antigen Autosuggestions...'
	@mkdir -p $(ZSH)/custom/plugins
	if [ ! -d $(ZSH)/custom/plugins/zsh-autosuggestions ]; then git clone https://github.com/zsh-users/zsh-autosuggestions.git $(ZSH)/custom/plugins/zsh-autosuggestions; fi
	@mkdir -p $(ADOTDIR)/bundles/zsh-users/zsh-syntax-highlighting/highlighters
	@ln -sf $(ZSH)/custom/plugins/zsh-autosuggestions/url $(ADOTDIR)/bundles/zsh-users/zsh-syntax-highlighting/highlighters/url

chrome-devtools-zero-base-themes: # adds dark theme for devtools (aka the chrome debugger)
	@echo '	Installing Chrome DevTools Theme - Zero Base Themes...'
	@mkdir -p $(CONFIG_ROOT)/devtools/themes
	if [ ! -d $(CONFIG_ROOT)/devtools/themes/zerodarkmatrix ]; then git clone https://github.com/mauricecruz/zero-base-themes.git $(CONFIG_ROOT)/devtools/themes/zerodarkmatrix; fi
	cd $(CONFIG_ROOT)/devtools/themes/zerodarkmatrix; npm i -g grunt-cli && npm install && grunt && cd $(DIR)
	if [ -f ~/.devtoolrc ]; then ln -s $(JBCONFIG_TOOLS_PATH)/chrome/.devtoolrc ~/.devtoolrc ; fi

colorls-dark-theme: ## adds dark theme for colorls (https://draculatheme.com/colorls)
	@echo '	Installing dark colorls theme...'
	@mkdir -p $(CONFIG_ROOT)/colorls
	if [ -f $(CONFIG_ROOT)/colorls/dark_colors.yaml ]; then mv $(CONFIG_ROOT)/colorls/dark_colors.yaml $(CONFIG_ROOT)/colorls/dark_colors.yaml.backup ; fi
	@cp $(JBCONFIG_TOOLS_PATH)/colorls/dark_colors.yaml $(CONFIG_ROOT)/colorls/dark_colors.yaml
	@$(COLORLSCMD) --dark

colorls-default-dark-theme: ## adds dark theme for colorls (https://github.com/athityakumar/colorls#recommended-configurations)
	@echo '	Installing default dark colorls theme...'
	@mkdir -p $(CONFIG_ROOT)/colorls
	if [ -f $(CONFIG_ROOT)/colorls/dark_colors.yaml ]; then mv $(CONFIG_ROOT)/colorls/default_dark_colors.yaml $(CONFIG_ROOT)/colorls/dark_colors.yaml.backup ; fi
	@cp $(JBCONFIG_TOOLS_PATH)/colorls/default_dark_colors.yaml $(CONFIG_ROOT)/colorls/dark_colors.yaml
	@$(COLORLSCMD) --dark

rbenv: ## install rbenv
	@echo '	Installing RBENV...'
	chmod +x $(DIR)/scripts/install/*.sh
	exec $(DIR)/scripts/install/rbenv.sh

rbenv-hard:
	@echo '	Hard Installing RBENV...'
	if [ -d $(RBENV_ROOT) ]; then make rmrf SRC=$(RBENV_ROOT); fi
	@$(MAKE) rbenv

iterm2-shell-integration: ## install item2 shell integration
	if [ ! -f ~/.iterm2/.iterm2_shell_integration.bash ]; then \
	curl -L https://iterm2.com/shell_integration/bash -o ~/.iterm2/.iterm2_shell_integration.bash; \
	fi
	if [ ! -f ~/.iterm2/.iterm2_shell_integration.zsh ]; then \
	curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2/.iterm2_shell_integration.zsh; \
	fi
	source ~/.iterm2/.iterm2_shell_integration.zsh

iterm2-profiles: ## update item2 profiles
	if [ ! -d $(ITERM_DYNAMIC_PROFILES) ]; then mkdir -p $(ITERM_DYNAMIC_PROFILES); fi
	if [ -f $(ITERM_DYNAMIC_PROFILES)/profiles.json ]; then rm -rf $(ITERM_DYNAMIC_PROFILES)/profiles.json; fi
	@ln -sf $(DIR)/tools/iterm2/profiles.json $(ITERM_DYNAMIC_PROFILES)/profiles.json

ifeq (${SYSTEM}, Darwin)
iterm2: ## setup iterm2
	@echo 'Running iTerm2 Setup...'
	@$(MAKE) iterm2-shell-integration
	@$(MAKE) iterm2-profiles
endif

deps:
	pip3 install cram=='0.6.*'

brew: ## install homebrew
ifeq (${SYSTEM}, Linux)
	apt-get install build-essential curl file git
endif
	if [ ! -d $(HOMEBREW_HOME_PATH) ]; then git clone https://github.com/Homebrew/brew $(HOMEBREW_HOME_PATH); fi
	mkdir -p $(HOMEBREW_BIN_PATH)
	@ln -sf $(HOMEBREW_HOME_PATH)/bin/brew $(HOMEBREW_BIN_PATH)/brew;(shell which brew) shellenv; cd $(DIR); make reload
	$(BREW) bundle install --file=./tools/brew/$(SYSTEM)/Brewfile

brew-check:
	@$(BREW) bundle check --file=./tools/brew/$(SYSTEM)/Brewfile --verbose

brew-clean:
	@$(BREW) bundle cleanup --file=./tools/brew/$(SYSTEM)/Brewfile

.PHONY: update
ifeq (${SYSTEM}, Linux)
update: prepare-project-directories antigen ohmyzsh powerline powerlevel10k zsh-dracula-theme \
	antigen-url-highlighter antigen-autosuggestions zsh-defer symlinks
endif
ifeq (${SYSTEM}, Darwin)
update: prepare-project-directories iterm2 iterm2-profiles iterm2-shell-integration brew antigen \
	maximum-awesome ohmyzsh powerline powerlevel10k zsh-dracula-theme antigen-url-highlighter \
	antigen-autosuggestions zsh-defer symlinks
endif

.PHONY: install
ifeq (${SYSTEM}, Linux)
install: prepare-project-directories antigen ohmyzsh powerline powerlevel10k zsh-dracula-theme \
	antigen-url-highlighter antigen-autosuggestions deps zsh-defer symlinks
endif
ifeq (${SYSTEM}, Darwin)
install: prepare-project-directories iterm2 iterm2-profiles iterm2-shell-integration brew antigen \
	maximum-awesome ohmyzsh powerline powerlevel10k zsh-dracula-theme antigen-url-highlighter \
	antigen-autosuggestions deps nvm zsh-defer symlinks
symlink-applications: symlink-docker-app
symlink-homebrew-wd-my-book: symlink-homebrew-cellar symlink-homebrew-caskroom symlink-homebrew-path
endif

yarn: ## install yarn
	mkdir -p /opt \
		&& cd /opt \
		&& wget https://yarnpkg.com/latest.tar.gz
	wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import \
		&& wget https://yarnpkg.com/latest.tar.gz.asc \
		&& gpg --verify latest.tar.gz.asc
	tar zvxf latest.tar.gz

refresh: ## update, cleanup and reset antigen
	source $(ADOTDIR)/bin/antigen.zsh
	antigen selfupdate \
		&& antigen update \
		&& antigen cleanup \
		&& antigen reset;
	make reload

ssh-keys: ## add all shh-keys
	chmod +x $(DIR)/scripts/ssh/*.sh
	exec $(DIR)/scripts/ssh/ssh-add-all.sh

redis: ## setup redis
	@echo
	@echo '	Making Redis...'
	@echo
	mkdir -p ~/redis \
		&& cd ~/redis \
		&& curl -O http://download.redis.io/redis-stable.tar.gz \
		&& tar xvzf redis-stable.tar.gz \
		&& cd redis-stable \
		&& make \
		&& make install
	cd $(DIR)
	@echo
	@echo '	Redis Successfully Installed, Built and Tested...'
	@echo '	For help: https://auth0.com/blog/introduction-to-redis-install-cli-commands-and-data-types/'
	@echo

haskell: ## install haskell
	curl https://get-ghcup.haskell.org -sSf | sh

reload: ## reload the shell
	exec $(SHELL) -l

check-scripts: ## run syntax and lint review on shell script
	exec shellcheck $(JBCONFIG_SCRIPTS_PATH)/*.sh

permitme-dir: ## add user to permissions for directories
	sudo chown -hR $(USER) $(PERMITTING)
	sudo chmod u+w $(PERMITTING)
	sudo chmod go-w $(PERMITTING)

permitme-file: ## add user to permissions for file
	sudo chown -hR $(USER) $(PERMITTING)
	sudo chmod 110 $(PERMITTING)
	sudo chmod ug+x $(PERMITTING)

permitme-antigen: ## add user to permissions for antigen
	@${MAKE} permitme-dir PERMITTING=$(ADOTDIR)
	@${MAKE} permitme-file PERMITTING=$(ADOTDIR)/bin/antigen.zsh

change-default-shell: ## change the default shell
	@echo
	@echo '	Changing Default Shell to...\n\t'
	@echo $(SHELL)
	@echo
	chsh -s $(SHELL)
	export SHELL=$(SHELL)

.PRECIOUS: Makefile

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
