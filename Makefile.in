SHELL=/usr/bin/zsh
URCHIN := urchin
PREFIX ?= /usr/local
LDFLAGS ?= $(libgl) -lpng -lz -lm

# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.
$(if $(findstring /,$(MAKEFILE_LIST)),$(error Please only invoke this makefile from the directory it resides in))
	# Note: With Travis CI:
	#  - the path to urchin is passed via the command line.
	#  - the other utilities are NOT needed, so we skip the test for their existence.
ifeq ($(findstring /,$(URCHIN)),) # urchin path was NOT passed in.
		# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.
		# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment
		# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.
	export PATH := $(shell printf '%s' "$$PWD/node_modules/.bin:$$PATH")
		# The list of all supporting utilities, installed with `npm install`.
	UTILS := $(URCHIN) replace semver
		# Make sure that all required utilities can be located.
	UTIL_CHECK := $(or $(shell PATH="$(PATH)" which $(UTILS) >/dev/null && echo 'ok'),$(error Did you forget to run `npm install` after cloning the repo? At least one of the required supporting utilities not found: $(UTILS)))
endif

SYSTEM =? $(shell uname -s)
HOMEBREW_PREFIX =? $(shell brew --prefix)

HOMEBREW_LINUX=/home/linuxbrew
HOMEBREW_PATH=$(HOMEBREW_LINUX)/.linuxbrew
HOMEBREW_BIN_PATH=$(HOMEBREW_LINUX)/.linuxbrew/bin
HOMEBREW_HOME_PATH=$(HOMEBREW_LINUX)/.linuxbrew/Homebrew
HOMEBREW_PATHS=$(HOMEBREW_HOME_PATH)/etc $(HOMEBREW_HOME_PATH)/include $(HOMEBREW_HOME_PATH)/lib $(HOMEBREW_HOME_PATH)/opt $(HOMEBREW_HOME_PATH)/sbin $(HOMEBREW_HOME_PATH)/share $(HOMEBREW_HOME_PATH)/var $(HOMEBREW_HOME_PATH)/var/homebrew/linked $(HOMEBREW_HOME_PATH)/Cellar;

DIR=$(HOME)/jbconfig
PROJECTS=$(HOME)/projects
GOPATH=$(PROJECTS)/go
GIT_USERNAME=Joaquin6
GITHUBGOPATH=$(GOPATH)/src/github.com
BITBUCKETPATH=$(PROJECTS)/bitbucket.org
GITHUBPATH=$(PROJECTS)/github.com
GITLABPATH=$(PROJECTS)/gitlab.com
GIT_USER_PATH=$(GITHUBPATH)/$(GIT_USERNAME)

SSHGIT=git@github.com:$(GIT_USERNAME)
HTTPSGIT=https://github.com/$(GIT_USERNAME)

ITERM_SUPPORT=$(HOME)/Library/Application\ Support/iTerm2
ITERM_SCRIPTS=$(ITERM_SUPPORT)/scripts
ITERM_DYNAMIC_PROFILES=$(ITERM_SUPPORT)/DynamicProfiles

NVM_DIR=$(HOME)/.nvm
DIRENV_USER_PATH=$(GIT_USER_PATH)/direnv
OMZ_USER_PATH=$(GIT_USER_PATH)/oh-my-zsh
ZSH=$(HOME)/.oh-my-zsh
ADOTDIR=$(HOME)/.antigen
ANTIGEN_USER_PATH=$(GIT_USER_PATH)/antigen
POWERLINE_USER_PATH=$(GIT_USER_PATH)/powerline
POWERLEVEL9K_PATH=$(HOME)/powerlevel9k
POWERLEVEL9K_USER_PATH=$(GIT_USER_PATH)/powerlevel9k
VIMRC_USER_PATH=$(GIT_USER_PATH)/vimrc
VIMRC_RUNTIME=$(HOME)/.vim_runtime
MAXIMUM_AWESOME_USER_PATH=$(GIT_USER_PATH)/maximum-awesome
FONT_DROID_SANS_MONO="Droid Sans Mono for Powerline Nerd Font Complete.otf"

USER_LOCAL=/usr/local
USER_LOCAL_SHARE=$(USER_LOCAL)/share
IS_MAC_OS=false
libgl=-lGL -lglut
FONT_PATH=$(HOME)/.local/share/fonts

ifeq ($(SYSTEM), Darwin)
	IS_MAC_OS=true
	FONT_PATH=$(HOME)/Library/Fonts
	libgl=-framework OpenGL -framework GLUT
endif

BREWCMD=$(shell which brew)
ANTIGENCMD=$(shell which antigen)

# Lists all targets defined in this makefile.
.PHONY: list
list:
	@$(MAKE) -pRrn : -f $(MAKEFILE_LIST) 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | sort

.PHONY: _ensure-tag
_ensure-tag:
ifndef TAG
	$(error Please invoke with `make TAG=<new-version> release`, where <new-version> is either an increment specifier (patch, minor, major, prepatch, preminor, premajor, prerelease), or an explicit major.minor.patch version number)
endif

# Ensures there are version tags in repository
.PHONY: _ensure-current-version

_ensure-current-version:
ifeq ($(shell git tag),$(printf ''))
	@git fetch --tags
endif

# Ensures that the git workspace is clean.
.PHONY: _ensure-clean
_ensure-clean:
	@[ -z "$$(git status --porcelain --untracked-files=no || echo err)" ] || { echo "Workspace is not clean; please commit changes first." >&2; exit 2; }

default: update

show-env:
	@echo $(SYSTEM)

symlinks:
	@ln -sf $(DIR)/zsh/.zlogin $(HOME)/.zlogin
	@ln -sf $(DIR)/zsh/.zlogout $(HOME)/.zlogout
	@ln -sf $(DIR)/zsh/.zprofile $(HOME)/.zprofile
	@ln -sf $(DIR)/zsh/alias/index.zsh $(HOME)/.zaliases
	@ln -sf $(DIR)/zsh/functions.zsh $(HOME)/.zfunctions
	@ln -sf $(DIR)/zsh/.zshenv $(HOME)/.zshenv
	@ln -sf $(DIR)/zsh/.zshrc $(HOME)/.zshrc

prepare-project-directories:
	@mkdir -p $(GITHUBPATH)
	@mkdir -p $(GITLABPATH)
	@mkdir -p $(BITBUCKETPATH)
	@mkdir -p $(GITHUBGOPATH)

clone:
	mkdir -p $(GIT_USER_PATH);
	if [ ! -d $(GIT_USER_PATH)/$(REPOSITORY) ]; then git clone $(SSHGIT)/$(REPOSITORY).git $(GIT_USER_PATH)/$(REPOSITORY) $(GIT_FLAGS); fi

clone-nvm:
	$(MAKE) clone REPOSITORY=nvm
	if [ ! -d $(NVM_DIR) ]; then ln -sf $(GIT_USER_PATH)/nvm $(NVM_DIR); fi
	cd $(NVM_DIR); git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags  --max-count=1)`

clone-zsh-url-highlighter:
	@$(MAKE) clone REPOSITORY=zsh-url-highlighter
	mkdir -p $(ZSH)/custom/plugins
	ln -sf $(GIT_USER_PATH)/zsh-url-highlighter $(ZSH)/custom/plugins/zsh-url-highlighter

clone-zsh-autosuggestions:
	@$(MAKE) clone REPOSITORY=zsh-autosuggestions
	mkdir -p $(ZSH)/custom/plugins
	ln -sf $(GIT_USER_PATH)/zsh-autosuggestions $(ZSH)/custom/plugins/zsh-autosuggestions

install-mongo:
	curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz
	curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz.sig
	curl -LO https://www.mongodb.org/static/pgp/server-3.4.asc
	gpg --import server-3.4.asc
	gpg --verify mongodb-osx-ssl-x86_64-3.4.9.tgz.sig mongodb-osx-ssl-x86_64-3.4.9.tgz

install-cask:
	if [[ $(SYSTEM) == *'Linux'* ]]; then sudo apt-get install emacs; fi
	curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python3

install-direnv:
	@$(MAKE) clone REPOSITORY=direnv
	cd $(GIT_USER_PATH)/direnv; sudo make install

install-kubectl-plugins:
	sudo chmod +x ./tools/kubectl/plugins/kubectl-*
	sudo mv ./tools/kubectl/plugins/kubectl-* /usr/local/bin

install-nvm:
	$(MAKE) clone-nvm
	chmod +x $(NVM_DIR)/nvm.sh
	source $(NVM_DIR)/nvm.sh

install-ohmyzsh:
	@echo '	Installing Oh-My-Zsh...'
	@$(MAKE) clone REPOSITORY=oh-my-zsh
	ln -sf $(GIT_USER_PATH)/oh-my-zsh $(ZSH)

install-antigen:
	@$(MAKE) clone REPOSITORY=antigen
	ln -sf $(ANTIGEN_USER_PATH) $(ADOTDIR)

fix-homebrew-paths:
	sudo mkdir -p $(HOMEBREW_HOME_PATH)/etc \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/include \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/lib \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/opt \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/sbin \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/share \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/var \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/var/homebrew/linked \
		&& sudo mkdir -p $(HOMEBREW_HOME_PATH)/Cellar;
	sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/etc \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/include \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/lib \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/opt \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/sbin \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/share \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/var \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/var/homebrew/linked \
		&& sudo chown -R a=r,u+w $(shell whoami) $(HOMEBREW_HOME_PATH)/Cellar;

update-antigen:
	cd $(ANTIGEN_USER_PATH) && git checkout . && git pull origin master;
	cd $(ANTIGEN_USER_PATH) && sudo make all && cd $(DIR);
	$(MAKE) permitme-antigen
	$(MAKE) refresh

install-powerline:
	@$(MAKE) clone REPOSITORY=fonts GIT_FLAGS=--depth=1
	cd $(GIT_USER_PATH)/fonts; ./install.sh

install-powerlevel9k:
	@$(MAKE) clone REPOSITORY=powerlevel9k
	cd $(GIT_USER_PATH)/powerlevel9k; git checkout . && git pull origin master
	ln -sf $(GIT_USER_PATH)/powerlevel9k $(POWERLEVEL9K_PATH)

install-maximum-awesome:
	@$(MAKE) clone REPOSITORY=maximum-awesome
	cd $(GIT_USER_PATH)/maximum-awesome; git checkout . && git pull origin master && rake

install-spaceship-prompt:
	@$(MAKE) clone REPOSITORY=spaceship-prompt
	ln -sf $(GIT_USER_PATH)/spaceship-prompt $(ZSH)/custom/themes/spaceship-prompt
	ln -sf $(GIT_USER_PATH)/spaceship-prompt/spaceship.zsh-theme $(ZSH)/custom/themes/spaceship.zsh-theme

install-vimrc:
	@$(MAKE) clone REPOSITORY=vimrc GIT_FLAGS=--depth=1
	cd $(GIT_USER_PATH)/vimrc; git checkout . && git pull origin master
	ln -sf $(GIT_USER_PATH)/vimrc $(VIMRC_RUNTIME)
	chmod +x $(VIMRC_RUNTIME)/install_awesome_vimrc.sh
	@exec $(VIMRC_RUNTIME)/install_awesome_vimrc.sh

install-zsh-url-highlighter:
	@$(MAKE) clone-zsh-url-highlighter
	mkdir -p $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters
	rm -rf $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url
	ln -sf $(ZSH)/custom/plugins/zsh-url-highlighter/url $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url

install-zsh-autosuggestions:
	@$(MAKE) clone-zsh-autosuggestions
	mkdir -p $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters
	ln -sf $(ZSH)/custom/plugins/zsh-autosuggestions/url $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url

install-rbenv:
	if [ ! -d $(HOME)/.rbenv ]; then git clone https://github.com/rbenv/rbenv.git $(HOME)/.rbenv; fi
	$(HOME)/.rbenv/src/configure
	@$(MAKE) -C $(HOME)/.rbenv/src
	val $(HOME)
	cd $(DIR)
	ln -sf  benv/bin/rbenv init -

iterm2-shell-integration:
	@curl -L https://iterm2.com/shell_integration/bash -o ~/.iterm2_shell_integration.bash
	@curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh
	source ~/.iterm2_shell_integration.zsh

iterm2-profiles:
	if [ ! -d $(ITERM_DYNAMIC_PROFILES) ]; then mkdir -p $(ITERM_DYNAMIC_PROFILES); fi
	if [ -f $(ITERM_DYNAMIC_PROFILES)/profiles.json ]; then rm -rf $(ITERM_DYNAMIC_PROFILES)/profiles.json; fi
	ln -sf $(DIR)/tools/iterm2/profiles.json $(ITERM_DYNAMIC_PROFILES)/profiles.json

iterm2-setup:
	echo 'Running iTerm2 Setup...'
	@$(MAKE) iterm2-shell-integration
	@$(MAKE) iterm2-profiles

install-deps:
	sudo pip3 install cram=='0.6.*'

install-brew:
ifeq (${SYSTEM}, Linux)
	sudo apt-get install build-essential curl file git
endif
	if [ ! -d $(HOMEBREW_HOME_PATH) ]; then git clone https://github.com/Homebrew/brew $(HOMEBREW_HOME_PATH); fi
	mkdir -p $(HOMEBREW_BIN_PATH)
	ln -sf $(HOMEBREW_HOME_PATH)/bin/brew $(HOMEBREW_BIN_PATH)/brew
	eval $($(HOMEBREW_BIN_PATH)/brew shellenv)
	$(MAKE) reload
	exec $(BREWCMD) install hello
	cd $(DIR)
	exec $(BREWCMD) bundle install --file=./tools/brew/$(SYSTEM)/Brewfile

brew-check:
	sudo $(BREWCMD) bundle check --file=./tools/brew/$(SYSTEM)/Brewfile --verbose

brew-clean:
	sudo $(BREWCMD) bundle cleanup --file=./tools/brew/$(SYSTEM)/Brewfile

.PHONY: update refresh
update:
	@echo
	@echo '	Running Update...'
	@echo
	make prepare-project-directories
	if [ $(SYSTEM) == *'Darwin'* ]; then make iterm2-setup; fi
	if [ $(SYSTEM) == *'Darwin'* ]; then make install-brew; fi
	if [ $(SYSTEM) == *'Linux'* ]; then make install-brew; fi
	make install-antigen
	make install-ohmyzsh
	make install-powerline
	make install-powerlevel9k
	if [[ $(SYSTEM) == *'Darwin'* ]]; then make install-maximum-awesome; fi
	make install-spaceship-prompt
	make install-zsh-url-highlighter
	make install-zsh-autosuggestions
	make symlinks
ifeq (${WITH_DEBUG}, no)
	$(call isede,"s/ (WARN|LOG|ERR|TRACE) .*&//",${TARGET})
	$(call isede,"/ (WARN|LOG|ERR|TRACE) .*/d",${TARGET})
endif
	@echo
	@echo '	Updated succesfully!...'
	@echo

yarn:
	sudo mkdir -p /opt \
		&& cd /opt \
		&& sudo wget https://yarnpkg.com/latest.tar.gz
	wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import \
		&& wget https://yarnpkg.com/latest.tar.gz.asc \
		&& gpg --verify latest.tar.gz.asc
	sudo tar zvxf latest.tar.gz

refresh:
	sudo
	[[ -s $(ADOTDIR)/antigen.zsh ]] && chmod +x $(ADOTDIR)/antigen.zsh
	source $(ADOTDIR)/antigen.zsh
	exec $(shell which antigen) selfupdate \
		&& exec $(shell which antigen) update \
		&& exec $(shell which antigen) cleanup \
		&& exec $(shell which antigen) reset;
	make permitme-antigen
	exec $(SHELL) -l

ssh-keys:
	chmod +x $(DIR)/scripts/ssh/*.sh
	exec $(DIR)/scripts/ssh/ssh-add-all.sh

redis:
	@echo
	@echo '	Making Redis...'
	@echo
	mkdir -p $(HOME)/redis \
		&& cd $(HOME)/redis \
		&& curl -O http://download.redis.io/redis-stable.tar.gz \
		&& tar xvzf redis-stable.tar.gz \
		&& cd redis-stable \
		&& make \
		&& sudo make install
	cd $(DIR)
	@echo
	@echo '	Redis Successfully Installed, Built and Tested...'
	@echo '	For help: https://auth0.com/blog/introduction-to-redis-install-cli-commands-and-data-types/'
	@echo

haskell:
	curl https://get-ghcup.haskell.org -sSf | sh

reload:
	@exec $(SHELL) -l

permitme-dir:
	sudo chown -hR $(shell whoami) $(PERMITTING)
	sudo chmod u+w $(PERMITTING)
	sudo chmod go-w $(PERMITTING)

permitme-file:
	@sudo chown -hR $(shell whoami) $(PERMITTING)
	@sudo chmod +110 $(PERMITTING)
	@sudo chmod ug+x $(PERMITTING)

permitme-antigen:
	@$(MAKE) permitme-dir PERMITTING=$(ADOTDIR)
	@$(MAKE) permitme-file PERMITTING=$(ADOTDIR)/antigen.zsh

change-default-shell:
	@echo
	@echo '	Changing Default Shell to...\n\t'
	@echo $(shell which zsh)
	@echo
	@chsh -s $(shell which zsh)
	export SHELL=$(shell which zsh)

.PRECIOUS: Makefile

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
