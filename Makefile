######################################################################
# This file was autogenerated by 'configure'. Do not edit it directly!
# Invocation was: ./configure 
######################################################################
WITH_CACHE=yes
WITH_DEBUG=yes
WITH_EXTENSIONS=yes
WITH_COMPLETION=yes
######################################################################
DIR=$(PWD)
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_ALL=en_US.UTF-8
# Since we rely on paths relative to the makefile location, abort if@$(MAKE) isn't being run from there.
$(if $(findstring /,$(MAKEFILE_LIST)),$(error Please only invoke this makefile from the directory it resides in))
# The files that need updating when incrementing the version number.
VERSIONED_FILES 	:= README.md package.json
# Define all shells to test with. Can be overridden with @$(MAKE) SHELLS=... <target>`.
SHELLS := sh bash zsh # ksh (#574)
# Generate 'test-<shell>' target names from specified shells.
# The embedded shell names are extracted on demand inside the recipes.
SHELL_TARGETS 	:= $(addprefix /bin/,$(SHELLS))
SHELL     		= /bin/zsh
PREFIX    		= /usr/local
CRAM_OPTS 		?= -v
IS_MAC_OS 		= false
SYSTEM 			= $(shell uname -s)
USER 			= $(shell whoami)
LDFLAGS 		= $(libgl) -lpng -lz -lm

COM_COLOR   = \033[0;34m
OBJ_COLOR   = \033[0;36m
OK_COLOR    = \033[0;32m
ERROR_COLOR = \033[0;31m
WARN_COLOR  = \033[0;33m
NO_COLOR    = \033[m

OK_STRING    = "[OK]"
ERROR_STRING = "[ERROR]"
WARN_STRING  = "[WARNING]"

GIT_USERNAME 		=Joaquin6
GITSSH 				=git@github.com:$(GIT_USERNAME)
GITHTTPS 			=https://github.com/$(GIT_USERNAME)

BANNER_SEP    =$(shell printf '%*s' 70 | tr ' ' '\#')
BANNER_TEXT   =This file was autogenerated by \`make\`. Do not edit it directly!
BANNER        =${BANNER_SEP}\n\# ${BANNER_TEXT}\n${BANNER_SEP}\n

HEADER_TEXT   =\# Jbconfig: A simple plugin manager for zsh\n\
\# Author: Joaquin Briceno\n\

PROJECT   			?= $(CURDIR)
NVM_DIR 			= ~/.nvm
RBENV_ROOT 			:= ~/.rbenv
ADOTDIR 			= ~/.antigen
ZSH 				= ~/.oh-my-zsh
VIMRC_RUNTIME 		= ~/.vim_runtime
FONT_PATH 			= ~/.local/share/fonts
PROJECTS_PATH 		= ~/projects
POWERLEVEL9K_PATH 	= ~/powerlevel9k
USER_LOCAL 			= $(PREFIX)
USER_LOCAL_SHARE 	= $(USER_LOCAL)/share
JBCONFIG_ZSH_PATH 	= $(DIR)/zsh
JBCONFIG_LOG_FILE   ?= ${DIR}/jbconfig.log

GOPATH 						=$(PROJECTS_PATH)/go
GITHUBPATH 					=$(PROJECTS_PATH)/github.com
GITLABPATH 					=$(PROJECTS_PATH)/gitlab.com
GITHUBGOPATH 				=$(GOPATH)/src/github.com
BITBUCKETPATH 				=$(PROJECTS_PATH)/bitbucket.org
GIT_USER_PATH 				=$(GITHUBPATH)/$(GIT_USERNAME)
DIRENV_USER_PATH 			=$(GIT_USER_PATH)/direnv
OMZ_USER_PATH 				=$(GIT_USER_PATH)/oh-my-zsh
ANTIGEN_USER_PATH 			=$(GIT_USER_PATH)/antigen
POWERLINE_USER_PATH 		=$(GIT_USER_PATH)/powerline
POWERLEVEL9K_USER_PATH 		=$(GIT_USER_PATH)/powerlevel9k
VIMRC_USER_PATH 			=$(GIT_USER_PATH)/vimrc
MAXIMUM_AWESOME_USER_PATH 	=$(GIT_USER_PATH)/maximum-awesome

PROJECT_SUBPATHS =$(GITHUBPATH) $(GITLABPATH) $(BITBUCKETPATH) $(GITHUBGOPATH)

IS_MAC_OS=false
libgl=-lGL -lglut
FONT_DROID_SANS_MONO="Droid Sans Mono for Powerline Nerd Font Complete.otf"
BREWCMD=$(shell which brew)

HOMEBREW_VISUAL		:= vim
HOMEBREW_PREFIX		= $(shell brew --prefix)
HOMEBREW_PATH 		= $(HOMEBREW_PREFIX)
HOMEBREW_BIN_PATH 	= $(HOMEBREW_PATH)/bin
HOMEBREW_CELLAR 	= $(HOMEBREW_PATH)/Cellar
HOMEBREW_HOME_PATH 	= $(HOMEBREW_PATH)

ifeq ($(SYSTEM), Linux)
	HOMEBREW_LINUX 		=/home/linuxbrew
	HOMEBREW_PATH 		=$(HOMEBREW_LINUX)/.linuxbrew
	HOMEBREW_BIN_PATH 	=$(HOMEBREW_LINUX)/.linuxbrew/bin
	HOMEBREW_HOME_PATH 	=$(HOMEBREW_LINUX)/.linuxbrew
endif

HOMEBREW_PATHS = $(HOMEBREW_HOME_PATH)/etc $(HOMEBREW_HOME_PATH)/include \
	$(HOMEBREW_HOME_PATH)/lib $(HOMEBREW_HOME_PATH)/opt $(HOMEBREW_HOME_PATH)/sbin \
	$(HOMEBREW_HOME_PATH)/share $(HOMEBREW_HOME_PATH)/var \
	$(HOMEBREW_HOME_PATH)/var/homebrew/linked $(HOMEBREW_HOME_PATH)/Cellar

ifeq ($(SYSTEM), Darwin)
	IS_MAC_OS=true
	FONT_PATH=~/Library/Fonts
	libgl=-framework OpenGL -framework GLUT
	ITERM_SUPPORT=~/Library/Application\ Support/iTerm2
	ITERM_SCRIPTS=$(ITERM_SUPPORT)/scripts
	ITERM_DYNAMIC_PROFILES=$(ITERM_SUPPORT)/DynamicProfiles
endif

define ised
	sed $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

define isede
	sed -E $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

ANTIGENCMD=$(shell which antigen)

# Lists all targets defined in this makefile.
.PHONY: list
list:
	@$(MAKE) -pRrn : -f $(MAKEFILE_LIST) 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | sort

default: list

show-env:
	@echo $(ENV_VARS)

show-envs:
	@echo $(env)

show-system-env:
	@$(MAKE) show-env ENV_VARS=$(SYSTEM)

show-user-env:
	@$(MAKE) show-env ENV_VARS=$(USER)

rmrf:
	[ -s $(SRC) ] && rm -rf $(SRC)

symlinks:
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zlogin ~/.zlogin
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zlogout ~/.zlogout
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zprofile ~/.zprofile
	@ln -sf $(JBCONFIG_ZSH_PATH)/alias/index.zsh ~/.zaliases
	@ln -sf $(JBCONFIG_ZSH_PATH)/functions.zsh ~/.zfunctions
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zshenv ~/.zshenv
	@ln -sf $(JBCONFIG_ZSH_PATH)/.zshrc ~/.zshrc
	@ln -sf $(JBCONFIG_ZSH_PATH)/.antigenrc ~/.antigenrc

prepare-project-directories: $(PROJECT_SUBPATHS)
	@mkdir -p $(PROJECT_SUBPATHS)

clone:
	mkdir -p $(GIT_USER_PATH);
	if [ ! -d $(GIT_USER_PATH)/$(REPOSITORY) ]; then git clone --single-branch --branch $(BRANCH) $(GITSSH)/$(REPOSITORY).git $(GIT_USER_PATH)/$(REPOSITORY) $(GIT_FLAGS); fi

clone-nvm:
	@$(MAKE) clone REPOSITORY=nvm BRANCH=master
	if [ ! -d $(NVM_DIR) ]; then ln -sf $(GIT_USER_PATH)/nvm $(NVM_DIR); fi
	cd $(NVM_DIR); git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags  --max-count=1)`

clone-zsh-url-highlighter:
	@$(MAKE) clone REPOSITORY=zsh-url-highlighter BRANCH=master
	@mkdir -p $(ZSH)/custom/plugins
	@ln -sf $(GIT_USER_PATH)/zsh-url-highlighter $(ZSH)/custom/plugins/zsh-url-highlighter

clone-zsh-autosuggestions:
	@$(MAKE) clone REPOSITORY=zsh-autosuggestions BRANCH=master
	@mkdir -p $(ZSH)/custom/plugins
	@ln -sf $(GIT_USER_PATH)/zsh-autosuggestions $(ZSH)/custom/plugins/zsh-autosuggestions

mongo:
	@curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz
	@curl -LO https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.4.9.tgz.sig
	@curl -LO https://www.mongodb.org/static/pgp/server-3.4.asc
	@gpg --import server-3.4.asc
	@gpg --verify mongodb-osx-ssl-x86_64-3.4.9.tgz.sig mongodb-osx-ssl-x86_64-3.4.9.tgz

cask:
	@echo '	Installing Cask...'
ifeq (${SYSTEM}, Linux)
	apt-get install emacs
endif
	curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python3

direnv:
	@echo '	Installing DirENV...'
	@$(MAKE) clone REPOSITORY=direnv BRANCH=master
	pushd $(GIT_USER_PATH)/direnv; make install; popd

install-kubectl-plugins:
	@echo '	Installing KubeCtl Plugins...'
	chmod +x ./tools/kubectl/plugins/kubectl-*
	mv ./tools/kubectl/plugins/kubectl-* /usr/local/bin

nvm:
	@echo '	Installing NVM...'
	@$(MAKE) clone-nvm
	chmod +x $(NVM_DIR)/nvm.sh
	source $(NVM_DIR)/nvm.sh

ohmyzsh:
	@echo '	Installing Oh-My-Zsh...'
	@$(MAKE) clone REPOSITORY=oh-my-zsh BRANCH=master
	@ln -sf $(GIT_USER_PATH)/oh-my-zsh $(ZSH)

antigen:
	@echo '	Installing Antigen...'
	@$(MAKE) clone REPOSITORY=antigen BRANCH=develop
	@ln -fs $(ANTIGEN_USER_PATH) $(ADOTDIR)

antigen-hard:
	@echo '	Hard Installing Antigen...'
	@$(MAKE) rmrf SRC=$(ADOTDIR) 
	@$(MAKE) rmrf SRC=$(ANTIGEN_USER_PATH) 
	@$(MAKE) antigen

fix-homebrew-paths: $(HOMEBREW_PATHS)
	mkdir -p $(HOMEBREW_PATHS)
	chown -R $(shell whoami) $(HOMEBREW_PATHS)

update-antigen:
	@echo '	Updating Antigen...'
	cd -P $(ADOTDIR) && git checkout . && git pull origin develop && make build && make install;
	cd $(DIR)
	make refresh

powerline:
	@echo '	Installing Powerline...'
	@$(MAKE) clone REPOSITORY=fonts BRANCH=master GIT_FLAGS=--depth=1
	cd $(GIT_USER_PATH)/fonts; ./install.sh

powerlevel9k:
	@echo '	Installing Powerlevel9k...'
	@$(MAKE) clone REPOSITORY=powerlevel9k BRANCH=master
	cd $(GIT_USER_PATH)/powerlevel9k; git checkout . && git pull origin master
	@ln -sf $(GIT_USER_PATH)/powerlevel9k $(POWERLEVEL9K_PATH)

maximum-awesome:
	@echo '	Installing Maximum Awesome...'
	@$(MAKE) clone REPOSITORY=maximum-awesome BRANCH=master
	cd $(GIT_USER_PATH)/maximum-awesome; git checkout . && git pull origin master && rake

spaceship-prompt:
	@echo '	Installing Spaceship Prompt...'
	@$(MAKE) clone REPOSITORY=spaceship-prompt BRANCH=master
	@ln -sf $(GIT_USER_PATH)/spaceship-prompt $(ZSH)/custom/themes/spaceship-prompt
	@ln -sf $(GIT_USER_PATH)/spaceship-prompt/spaceship.zsh-theme $(ZSH)/custom/themes/spaceship.zsh-theme

install-vimrc:
	@echo '	Installing Vimrc...'
	@$(MAKE) clone REPOSITORY=vimrc BRANCH=master GIT_FLAGS=--depth=1
	cd $(GIT_USER_PATH)/vimrc; git checkout . && git pull origin master
	@ln -sf $(GIT_USER_PATH)/vimrc $(VIMRC_RUNTIME)
	chmod +x $(VIMRC_RUNTIME)/install_awesome_vimrc.sh
	@exec $(VIMRC_RUNTIME)/install_awesome_vimrc.sh

zsh-url-highlighter:
	@echo '	Installing ZSH URL Highlighter...'
	@$(MAKE) clone-zsh-url-highlighter
	@mkdir -p $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters
	@rm -rf $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url
	@ln -sf $(ZSH)/custom/plugins/zsh-url-highlighter/url $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url

zsh-autosuggestions:
	@echo '	Installing ZSH Autosuggestions...'
	@$(MAKE) clone-zsh-autosuggestions
	@mkdir -p $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters
	@ln -sf $(ZSH)/custom/plugins/zsh-autosuggestions/url $(ANTIGEN_USER_PATH)/bundles/$(GIT_USERNAME)/zsh-syntax-highlighting/highlighters/url

rbenv:
	@echo '	Installing RBENV...'
	if [ ! -d $(RBENV_ROOT) ]; then git clone https://github.com/rbenv/rbenv.git $(RBENV_ROOT); fi
	pushd $(RBENV_ROOT); chmod +x src/configure; src/configure && make -C src; popd
	pushd $(RBENV_ROOT); ln -sf bin/rbenv init; popd

rbenv-hard:
	@echo '	Hard Installing RBENV...'
	if [ -d $(RBENV_ROOT) ]; then make rmrf SRC=$(RBENV_ROOT); fi
	@$(MAKE) rbenv

iterm2-shell-integration:
	@curl -L https://iterm2.com/shell_integration/bash -o ~/.iterm2_shell_integration.bash
	@curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh
	source ~/.iterm2_shell_integration.zsh

iterm2-profiles:
	if [ ! -d $(ITERM_DYNAMIC_PROFILES) ]; then mkdir -p $(ITERM_DYNAMIC_PROFILES); fi
	if [ -f $(ITERM_DYNAMIC_PROFILES)/profiles.json ]; then rm -rf $(ITERM_DYNAMIC_PROFILES)/profiles.json; fi
	@ln -sf $(DIR)/tools/iterm2/profiles.json $(ITERM_DYNAMIC_PROFILES)/profiles.json

iterm2:
	@echo 'Running iTerm2 Setup...'
	@$(MAKE) iterm2-shell-integration
	@$(MAKE) iterm2-profiles

deps:
	pip3 install cram=='0.6.*'

brew:
ifeq (${SYSTEM}, Linux)
	apt-get install build-essential curl file git
endif
	if [ ! -d $(HOMEBREW_HOME_PATH) ]; then git clone https://github.com/Homebrew/brew $(HOMEBREW_HOME_PATH); fi
	mkdir -p $(HOMEBREW_BIN_PATH)
	@ln -sf $(HOMEBREW_HOME_PATH)/bin/brew $(HOMEBREW_BIN_PATH)/brew
	$(shell which brew) shellenv
	@$(MAKE) reload
	cd $(DIR)
	$(BREW) bundle install --file=./tools/brew/$(SYSTEM)/Brewfile

brew-check:
	@$(BREW) bundle check --file=./tools/brew/$(SYSTEM)/Brewfile --verbose

brew-clean:
	@$(BREW) bundle cleanup --file=./tools/brew/$(SYSTEM)/Brewfile

.PHONY: update
ifeq (${SYSTEM}, Linux)
update: prepare-project-directories antigen ohmyzsh powerline powerlevel9k spaceship-prompt \
	zsh-url-highlighter zsh-autosuggestions symlinks
endif
ifeq (${SYSTEM}, Darwin)
update: prepare-project-directories iterm2 iterm2-profiles iterm2-shell-integration brew antigen \
	maximum-awesome ohmyzsh powerline powerlevel9k spaceship-prompt zsh-url-highlighter \
	zsh-autosuggestions symlinks
endif

.PHONY: install
ifeq (${SYSTEM}, Linux)
install: prepare-project-directories antigen ohmyzsh powerline powerlevel9k spaceship-prompt \
	zsh-url-highlighter zsh-autosuggestions deps symlinks
endif
ifeq (${SYSTEM}, Darwin)
install: prepare-project-directories iterm2 iterm2-profiles iterm2-shell-integration brew antigen \
	maximum-awesome ohmyzsh powerline powerlevel9k spaceship-prompt zsh-url-highlighter \
	zsh-autosuggestions deps nvm symlinks
endif

yarn:
	mkdir -p /opt \
		&& cd /opt \
		&& wget https://yarnpkg.com/latest.tar.gz
	wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import \
		&& wget https://yarnpkg.com/latest.tar.gz.asc \
		&& gpg --verify latest.tar.gz.asc
	tar zvxf latest.tar.gz

refresh:
	source $(ANTIGEN_USER_PATH)/bin/antigen.zsh
	antigen selfupdate \
		&& antigen update \
		&& antigen cleanup \
		&& antigen reset;
	make reload

ssh-keys:
	chmod +x $(DIR)/scripts/ssh/*.sh
	exec $(DIR)/scripts/ssh/ssh-add-all.sh

redis:
	@echo
	@echo '	Making Redis...'
	@echo
	mkdir -p ~/redis \
		&& cd ~/redis \
		&& curl -O http://download.redis.io/redis-stable.tar.gz \
		&& tar xvzf redis-stable.tar.gz \
		&& cd redis-stable \
		&& make \
		&& make install
	cd $(DIR)
	@echo
	@echo '	Redis Successfully Installed, Built and Tested...'
	@echo '	For help: https://auth0.com/blog/introduction-to-redis-install-cli-commands-and-data-types/'
	@echo

haskell:
	curl https://get-ghcup.haskell.org -sSf | sh

reload:
	exec $(SHELL) -l

permitme-dir:
	sudo chown -hR $(USER) $(PERMITTING)
	sudo chmod u+w $(PERMITTING)
	sudo chmod go-w $(PERMITTING)

permitme-file:
	sudo chown -hR $(USER) $(PERMITTING)
	sudo chmod 110 $(PERMITTING)
	sudo chmod ug+x $(PERMITTING)

permitme-antigen:
	@${MAKE} permitme-dir PERMITTING=$(ANTIGEN_USER_PATH)
	@${MAKE} permitme-file PERMITTING=$(ANTIGEN_USER_PATH)/bin/antigen.zsh
	@${MAKE} permitme-dir PERMITTING=$(ADOTDIR)
	@${MAKE} permitme-file PERMITTING=$(ADOTDIR)/bin/antigen.zsh

change-default-shell:
	@echo
	@echo '	Changing Default Shell to...\n\t'
	@echo $(SHELL)
	@echo
	chsh -s $(SHELL)
	export SHELL=$(SHELL)

.PRECIOUS: Makefile

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
